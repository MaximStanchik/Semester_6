-- 1.	Создайте таблицу Report, содержащую два столбца – id и XML-столбец 
CREATE TABLE Report (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ReportData XMLTYPE
);

SELECT * FROM Report;

-- 2.	Создайте процедуру генерации XML. XML должен включать данные из как минимум 3 соединенных таблиц, различные промежуточные итоги и штамп времени

CREATE OR REPLACE PROCEDURE GenerateOrdersXML (OrdersXML OUT CLOB) IS
BEGIN
  SELECT XMLSERIALIZE(CONTENT
    XMLELEMENT("Orders",
      XMLAGG(
        XMLELEMENT("Order",
          XMLELEMENT("OrderID", o.ID),
          XMLELEMENT("ClientID", c.ID),
          XMLELEMENT("ClientLogin", c.LOGIN),
          XMLELEMENT("ClientFirstName", ci.FIRST_NAME),
          XMLELEMENT("ClientLastName", ci.LAST_NAME),
          XMLELEMENT("DriverID", d.ID),
          XMLELEMENT("DriverLogin", d.LOGIN),
          XMLELEMENT("OrderStatus", o.STATUS),
          XMLELEMENT("CreatedAt", TO_CHAR(o.CREATED_AT, 'YYYY-MM-DD"T"HH24:MI:SS')),
          XMLELEMENT("TotalWeight", o.TOTAL_WEIGHT),
          XMLELEMENT("TotalVolume", o.TOTAL_VOLUME)
        )
      )
    )
    AS CLOB
  )
  INTO OrdersXML
  FROM ORDERS o
  JOIN CLIENT c ON o.CLIENT_ID = c.ID
  JOIN CLIENT_INFO ci ON c.ID = ci.CLIENT_ID
  JOIN DRIVER d ON o.DRIVER_ID = d.ID;
END;

SELECT * FROM USER_OBJECTS
WHERE OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = 'GENERATEORDERSXML';

SELECT * 
FROM user_errors 
WHERE name = 'GENERATEORDERSXML' AND type = 'PROCEDURE';

DECLARE
  v_OrdersXML CLOB;
  v_buffer VARCHAR2(32767);
  v_pos NUMBER := 1;
  v_chunk_size CONSTANT NUMBER := 32767;
BEGIN
  GenerateOrdersXML(v_OrdersXML);
  
  WHILE v_pos <= DBMS_LOB.GETLENGTH(v_OrdersXML) LOOP
    v_buffer := DBMS_LOB.SUBSTR(v_OrdersXML, v_chunk_size, v_pos);
    DBMS_OUTPUT.PUT_LINE(v_buffer);
    v_pos := v_pos + v_chunk_size;
  END LOOP;
END;

-- 3.	Создайте процедуру вставки этого XML в таблицу Report
CREATE OR REPLACE PROCEDURE InsertReportData (
    p_xmlData IN CLOB
) AS
BEGIN
    INSERT INTO Report (ReportData)
    VALUES (XMLTYPE(p_xmlData)); 
END;

SELECT * FROM USER_OBJECTS
WHERE OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = 'INSERTREPORTDATA';

SELECT * 
FROM user_errors 
WHERE name = 'INSERTREPORTDATA' AND type = 'PROCEDURE';

DECLARE
    v_xmlData CLOB;
BEGIN
    v_xmlData := to_clob('<Orders><Order><OrderID>3</OrderID><ClientID>3</ClientID><ClientLogin>happyPenguin</ClientLogin>') ||
                 to_clob('<ClientFirstName>Penny</ClientFirstName><ClientLastName>Slide</ClientLastName><DriverID>1</DriverID><DriverLogin>speedyTurtle</DriverLogin>') ||
                 to_clob('<OrderStatus>Delivered</OrderStatus><CreatedAt>2025-03-15T09:05:11</CreatedAt>') ||
                 to_clob('<TotalWeight>4500</TotalWeight><TotalVolume>2.5</TotalVolume></Order><Order><OrderID>42</OrderID>') ||
                 to_clob('<ClientID>1</ClientID><ClientLogin>funnyCat</ClientLogin><ClientFirstName>UpdatedFirst</ClientFirstName>') ||
                 to_clob('<ClientLastName>UpdatedLast</ClientLastName><DriverID>1</DriverID><DriverLogin>speedyTurtle</DriverLogin></Order></Orders>');

    InsertReportData(v_xmlData);
END;

-- 4.	Создайте индекс над XML-столбцом в таблице Report.
CREATE INDEX idx_reportdata_xml ON Report (ReportData) INDEXTYPE IS XDB.XMLINDEX;
ALTER INDEX IDX_REPORTDATA_XML ENABLE;

SELECT * FROM all_ind_columns WHERE index_name = 'idx_reportdata_xml';
SELECT index_name, column_name FROM all_ind_columns WHERE table_name = 'REPORT' ORDER BY index_name, column_position;

-- 5.	Создайте процедуру извлечения значений элементов и/или атрибутов из XML -столбца в таблице Report (параметр – значение атрибута или элемента)
CREATE OR REPLACE PROCEDURE getInfoFromXml (
    p_ElementName IN VARCHAR2
)
AS
    v_sql VARCHAR2(4000);
    v_cursor SYS_REFCURSOR;
    v_result VARCHAR2(255);
BEGIN
    v_sql := '
        SELECT XMLCast(
                 XMLQuery(
                   ''/Orders/Order/' || p_ElementName || '[1]''
                   PASSING ReportData
                   RETURNING CONTENT
                 ) AS VARCHAR2(255)
               )
        FROM Report';

    OPEN v_cursor FOR v_sql;

    LOOP
        FETCH v_cursor INTO v_result;
        EXIT WHEN v_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Extracted Value: ' || v_result);
    END LOOP;

    CLOSE v_cursor;
END;

SELECT * FROM USER_OBJECTS
WHERE OBJECT_TYPE = 'PROCEDURE' AND OBJECT_NAME = 'GETINFOFROMXML';

SELECT * 
FROM user_errors 
WHERE name = 'GETINFOFROMXML' AND type = 'PROCEDURE';

BEGIN
    getInfoFromXml('OrderStatus'); 
END;

-- Демонстрация работоспособности индексов

ALTER INDEX IDX_REPORTDATA_XML ENABLE;

BEGIN 
  DBMS_STATS.GATHER_TABLE_STATS('SYSTEM', 'REPORT');
END;

SELECT index_name, uniqueness, index_type, status
FROM all_indexes
WHERE table_name = 'REPORT' 
ORDER BY index_name;

SELECT x.*
FROM Report r,
     XMLTable('/Orders/Order' PASSING r.ReportData
              COLUMNS 
                OrderID NUMBER PATH 'OrderID',
                Status VARCHAR2(50) PATH 'OrderStatus') x;
