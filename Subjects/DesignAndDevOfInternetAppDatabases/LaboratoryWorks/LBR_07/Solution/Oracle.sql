-- Добавили столбцы и таблицы, чтобы можно было выполнять задание:

ALTER TABLE ORDERS ADD (
    FUEL_CONSUMPTION NUMBER(10, 2), 
    FUEL_COST NUMBER(10, 2)          
);

CREATE TABLE FUEL_COSTS (
    ID NUMBER(4) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    MONTH NUMBER(2) NOT NULL,          
    YEAR NUMBER(4) NOT NULL,          
    PRICE_PER_LITER NUMBER(10, 2) NOT NULL 
);

ALTER TABLE SERVICES ADD (
    FUEL_COST_FACTOR NUMBER(10, 2) DEFAULT 1.0 
);

SELECT * FROM orders;

-- 1.	Постройте при помощи конструкции MODEL запросы, которые разрабатывают план: 
-- план стоимости перевозок для каждого клиента на следующий год, 
-- учитывая рост стоимости затрат на 10% на бензин по сравнению с
-- аналогичным месяцем прошлого года.
SELECT * FROM orders WHERE CLIENT_ID = 26 AND status in ('Delivered', 'Completed');

SELECT
    CLIENT_ID AS идентификатор_клиента, 
    LOGIN AS логин_клиента,
    MONTH AS месяц,
    CURRENT_YEAR_COST AS текущая_годовая_стоимость,
    ROUND(CURRENT_YEAR_COST * 1.10, 2) AS план_на_следующий_год,
    TOTAL_ESTIMATED_COST AS общая_расчетная_стоимость
FROM
    (
        SELECT
            c.ID AS CLIENT_ID,
            c.LOGIN,
            EXTRACT(MONTH FROM o.CREATED_AT) AS MONTH,
            SUM(s.BASE_RATE) + SUM(o.FUEL_COST) AS CURRENT_YEAR_COST,
            0 AS PREVIOUS_YEAR_COST,
            0 AS TOTAL_ESTIMATED_COST
        FROM
            CLIENT c
        LEFT JOIN
            ORDERS o ON c.ID = o.CLIENT_ID
        LEFT JOIN
            SERVICES s ON o.SERVICE_ID = s.ID
        WHERE
            o.CREATED_AT >= ADD_MONTHS(TRUNC(SYSDATE, 'YEAR'), -12)
        GROUP BY
            c.ID,
            c.LOGIN,
            EXTRACT(MONTH FROM o.CREATED_AT)
    )
MODEL
    PARTITION BY (CLIENT_ID, LOGIN)
    DIMENSION BY (MONTH)
    MEASURES (
        CURRENT_YEAR_COST,
        PREVIOUS_YEAR_COST,
        TOTAL_ESTIMATED_COST
    )
    RULES (
        CURRENT_YEAR_COST[ANY] = CURRENT_YEAR_COST[CV()],
       
        PREVIOUS_YEAR_COST[ANY] = NVL(CURRENT_YEAR_COST[CV()], 0),
        
        TOTAL_ESTIMATED_COST[ANY] = 
            SUM(CURRENT_YEAR_COST)[MONTH IN (1,2,3,4,5,6,7,8,9,10,11,12)]
    )
ORDER BY
    CLIENT_ID,
    MONTH;
   
-- 2.	Найдите при помощи конструкции MATCH_RECOGNIZE() данные, которые соответствуют шаблону: 
-- Рост, падение, рост предоставления для каждого вида услуг
SELECT * FROM services; 
     -- вставка значений, которые соответствуют шаблону
  INSERT INTO ORDERS (
    ID, CLIENT_ID, DRIVER_ID, SERVICE_ID, STATUS, CREATED_AT, ROUTE, DELIVERY_TYPE, 
    TOTAL_WEIGHT, TOTAL_VOLUME, DELIVERED_AT, FUEL_CONSUMPTION, FUEL_COST
) VALUES 
(1050, 1, 1, 20, 'Delivered', TO_TIMESTAMP('2025-02-10 09:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 5, 'Standard', 50, 2, TO_TIMESTAMP('2025-02-10 12:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 15, 25.5);
  INSERT INTO ORDERS (
    ID, CLIENT_ID, DRIVER_ID, SERVICE_ID, STATUS, CREATED_AT, ROUTE, DELIVERY_TYPE, 
    TOTAL_WEIGHT, TOTAL_VOLUME, DELIVERED_AT, FUEL_CONSUMPTION, FUEL_COST
) VALUES
(1053, 2, 2, 20, 'Delivered', TO_TIMESTAMP('2025-02-15 10:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 3, 'Express', 30, 1.5, TO_TIMESTAMP('2025-02-15 13:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 9, 15.3);
  INSERT INTO ORDERS (
    ID, CLIENT_ID, DRIVER_ID, SERVICE_ID, STATUS, CREATED_AT, ROUTE, DELIVERY_TYPE, 
    TOTAL_WEIGHT, TOTAL_VOLUME, DELIVERED_AT, FUEL_CONSUMPTION, FUEL_COST
) VALUES
(1052, 3, 3, 20, 'Delivered', TO_TIMESTAMP('2025-03-05 11:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 7, 'Standard', 40, 1.8, TO_TIMESTAMP('2025-03-05 15:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 21, 35.7);
  INSERT INTO ORDERS (
    ID, CLIENT_ID, DRIVER_ID, SERVICE_ID, STATUS, CREATED_AT, ROUTE, DELIVERY_TYPE, 
    TOTAL_WEIGHT, TOTAL_VOLUME, DELIVERED_AT, FUEL_CONSUMPTION, FUEL_COST
) VALUES
(1054, 4, 4, 20, 'Delivered', TO_TIMESTAMP('2025-04-12 08:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 2, 'Express', 25, 1.2, TO_TIMESTAMP('2025-04-12 10:30:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 6, 10.2);
  INSERT INTO ORDERS (
    ID, CLIENT_ID, DRIVER_ID, SERVICE_ID, STATUS, CREATED_AT, ROUTE, DELIVERY_TYPE, 
    TOTAL_WEIGHT, TOTAL_VOLUME, DELIVERED_AT, FUEL_CONSUMPTION, FUEL_COST
) VALUES
(1055, 5, 5, 20, 'Delivered', TO_TIMESTAMP('2025-04-18 14:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 4, 'Standard', 60, 2.5, TO_TIMESTAMP('2025-04-18 18:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 12, 20.4);
  INSERT INTO ORDERS (
    ID, CLIENT_ID, DRIVER_ID, SERVICE_ID, STATUS, CREATED_AT, ROUTE, DELIVERY_TYPE, 
    TOTAL_WEIGHT, TOTAL_VOLUME, DELIVERED_AT, FUEL_CONSUMPTION, FUEL_COST
) VALUES
(1056, 6, 6, 20, 'Delivered', TO_TIMESTAMP('2025-04-22 10:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 6, 'Express', 35, 1.7, TO_TIMESTAMP('2025-04-22 13:30:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 18, 30.6);
  INSERT INTO ORDERS (
    ID, CLIENT_ID, DRIVER_ID, SERVICE_ID, STATUS, CREATED_AT, ROUTE, DELIVERY_TYPE, 
    TOTAL_WEIGHT, TOTAL_VOLUME, DELIVERED_AT, FUEL_CONSUMPTION, FUEL_COST
) VALUES
(1057, 7, 7, 20, 'Delivered', TO_TIMESTAMP('2025-05-03 09:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 1, 'Standard', 20, 1, TO_TIMESTAMP('2025-05-03 11:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF'), 3, 5.1);
   
-- Вывод всех значений, в том числе и тех, которые не соответствуют шаблону
SELECT 
    service_id,
    service_name,
    LISTAGG(
        year || '-' || LPAD(month, 2, '0') || ': ' || 
        total_cost || ' (' || 
        CASE 
            WHEN prev_month_cost = 0 THEN 'No prev data' 
            WHEN total_cost > prev_month_cost THEN '↑' 
            WHEN total_cost < prev_month_cost THEN '↓' 
            ELSE '→' 
        END || ' ' || 
        CASE 
            WHEN COALESCE(prev_month_cost, 0) = 0 THEN '0%'
            ELSE ROUND((total_cost - prev_month_cost)/prev_month_cost*100, 2) || '%'
        END || ')', 
        ', '
    ) WITHIN GROUP (ORDER BY year, month) AS monthly_costs_summary,
    SUM(total_cost) AS total_year_cost,
    ROUND(AVG(CASE WHEN prev_month_cost > 0 THEN (total_cost - prev_month_cost)/prev_month_cost*100 END), 2) AS avg_monthly_change_percent
FROM (
    SELECT 
        s.ID AS service_id,
        s.NAME AS service_name,
        EXTRACT(YEAR FROM o.DELIVERED_AT) AS year,
        EXTRACT(MONTH FROM o.DELIVERED_AT) AS month,
        COALESCE(SUM(s.BASE_RATE * r.DISTANCE), 0) AS total_cost,
        LAG(COALESCE(SUM(s.BASE_RATE * r.DISTANCE), 0)) OVER (
            PARTITION BY s.ID 
            ORDER BY EXTRACT(YEAR FROM o.DELIVERED_AT), EXTRACT(MONTH FROM o.DELIVERED_AT)
        ) AS prev_month_cost
    FROM 
        SERVICES s
    LEFT JOIN ORDERS o ON o.SERVICE_ID = s.ID AND o.STATUS IN ('Delivered', 'Completed') AND o.DELIVERED_AT IS NOT NULL
    LEFT JOIN ROUTES r ON o.ROUTE = r.ID
    GROUP BY 
        s.ID,
        s.NAME,
        EXTRACT(YEAR FROM o.DELIVERED_AT),
        EXTRACT(MONTH FROM o.DELIVERED_AT)
) 
GROUP BY 
    service_id,
    service_name
ORDER BY 
    service_id; 
   
-- Вывод только тех записей, которые соответствуют шаблону
WITH monthly_data AS (
    SELECT 
        s.ID AS service_id,
        EXTRACT(YEAR FROM o.DELIVERED_AT) AS year,
        EXTRACT(MONTH FROM o.DELIVERED_AT) AS month,
        COALESCE(SUM(s.BASE_RATE * r.DISTANCE), 0) AS total_cost
    FROM 
        SERVICES s
    LEFT JOIN ORDERS o ON o.SERVICE_ID = s.ID 
        AND o.STATUS IN ('Delivered', 'Completed') 
        AND o.DELIVERED_AT IS NOT NULL
    LEFT JOIN ROUTES r ON o.ROUTE = r.ID
    GROUP BY 
        s.ID,
        EXTRACT(YEAR FROM o.DELIVERED_AT),
        EXTRACT(MONTH FROM o.DELIVERED_AT)
),
lagged_data AS (
    SELECT 
        service_id,
        year,
        month,
        total_cost,
        LAG(total_cost) OVER (PARTITION BY service_id ORDER BY year, month) AS prev_month_cost
    FROM 
        monthly_data
),
pattern_services AS (
    SELECT DISTINCT service_id
    FROM lagged_data
    MATCH_RECOGNIZE (
        PARTITION BY service_id
        ORDER BY year, month
        PATTERN (A B C)
        DEFINE 
            A AS A.total_cost < PREV(A.total_cost),
            B AS B.total_cost > PREV(B.total_cost),
            C AS C.total_cost < PREV(C.total_cost)
    )
)
SELECT 
    ld.service_id,
    LISTAGG(
        ld.year || '-' || LPAD(ld.month, 2, '0') || ': ' || 
        ld.total_cost || ' (' || 
        CASE 
            WHEN ld.prev_month_cost IS NULL THEN 'No prev data'
            WHEN ld.total_cost > ld.prev_month_cost THEN '↑'
            WHEN ld.total_cost < ld.prev_month_cost THEN '↓'
            ELSE '→'
        END || ' ' || 
        CASE 
            WHEN COALESCE(ld.prev_month_cost, 0) = 0 THEN '0%'
            ELSE ROUND((ld.total_cost - ld.prev_month_cost) / ld.prev_month_cost * 100, 2) || '%'
        END || ')', 
        ', '
    ) WITHIN GROUP (ORDER BY ld.year, ld.month) AS monthly_costs_summary,
    SUM(ld.total_cost) AS total_year_cost,
    ROUND(AVG(
        CASE 
            WHEN ld.prev_month_cost > 0 THEN (ld.total_cost - ld.prev_month_cost) / ld.prev_month_cost * 100
        END
    ), 2) AS avg_monthly_change_percent
FROM 
    lagged_data ld
JOIN 
    pattern_services ps ON ld.service_id = ps.service_id
GROUP BY 
    ld.service_id
ORDER BY 
    ld.service_id;
    
   SELECT * FROM orders WHERE service_id = 20;
    SELECT * FROM orders WHERE service_id = 23;